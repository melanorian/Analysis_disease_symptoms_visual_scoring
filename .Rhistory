# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = simple_df$df_sorted.count ,size = 3)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = simple_df$df_sorted.count ,size = 3, hadjust = -1)
help("geom_text")
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(data = NULL ,size = 3, hjust = -1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(data = NULL ,size = 3, hjust = -1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(label = paste(simple_df$df_sorted.count), parse = TRUE ,size = 3, hjust = -1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
paste(simple_df$df_sorted.count)
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(label = paste(simple_df$df_sorted.count),size = 3, hjust = -1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(label = paste(simple_df$df_sorted.count),size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.1))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(label = paste(simple_df$df_sorted.count),size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(label = paste(simple_df$df_sorted.count),size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_label(label = simple_df$df_sorted.count ,size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = simple_df$df_sorted.count ,size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
simple_df$df_sorted.count
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = df_sorted.count ,size = 3, hjust = 1)
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = simple_df$df_sorted.count ,size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
labels
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = labels ,size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
labels
simple_df_d
simple_df_d
merged_df
merged_df <- arrange(merged_df, merged_df$df_sorted.Effector_line)
merged_df
# add the labels to the simple_df
merged_df <- merge(simple_df, simple_df_d)
merged_df
simple_df
simple_df_d
simple_df
View(df)
View(df)
library(tidyr)
# A) General basics ----
# 1. clean environment
rm(list=ls())
# A) General basics ----
# 1. clean environment
rm(list=ls())
# Generate suffix for output names
SUF <- "1"
# generate prefix string including date/ Initials
current_date <- gsub("-", "", as.character(Sys.Date()))# Get the current date as character
pre <- paste("MM", current_date, sep = "")
# 2. open libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readxl)
library(plotly)
library(tidyr)
# 3. set working directory
setwd("C:/Users/Mende012/Documents/Bioinformatics/Cell_death/Analysis_disease_symptoms_visual_scoring")
# 4. load file
df <- read_xlsx("MM20230516_summary_visual_score_cell_death.xlsx")
# B) get data(frame) into desired shape ----
# 5. rename columns and select only relevant columns
df <- data.frame("date_infiltration" = df$`Date infiltartion`,
"Effector_line" = df$`Effector line`,
"nr_score_0" = df$disease_score_0,
"nr_score_1" = df$disease_score_1,
"nr_score_2" = df$disease_score_2,
"nr_score_3" = df$disease_score_3,
"nr_score_4" = df$disease_score_4,
"nr_infiltration_spots" = df$`n (infiltration spots)`,
"avg_score" = df$`average disease score`)
# drop first row that only contains numbers of disease scores
df <- df[!(rownames(df) == '1'),]
# C) calculate the percentages of disease score incidences and store in df ----
# 6. create input vectors
# vector of row numbers
rows <- as.vector(1:length(df$Effector_line))
# Vector of colnames containing scores
n_scores <- grep("nr_score_", colnames(df), value = TRUE)
## 7. Design a function that can calculate the percentage of infiltration spots
# that was scored with a specific disease severity. Run the function to obtain a
# list of values.
result_perc <- do.call(cbind, lapply(n_scores, function(score) {
t(sapply(rows, function(row_nr) {
nr_sum <- df$nr_infiltration_spots[row_nr]
nr_score <- df[[score]][row_nr]
perc <- (nr_score / nr_sum) * 100
return(perc)
}))
})) %>% t()
# 8.!! Convert the original df to a long format so that the % results can be added
# 8.1 Convert the dataframe from wide to long format
df_long <- tidyr::pivot_longer(df,
cols = starts_with("nr_score_"),
names_to = "disease_score",
values_to = "count")
#!!! Sort the dataframe by first "disease_score", "disease_score", "Effector_line" columns in ascending order
df_sorted <- arrange(df_long, disease_score, Effector_line)
# 8.2 add the % (output of 7.) to the df_sorted, make EXTRA sure they are in the
#     correct order
df_sorted$res_perc <- result_perc
# D) create a stagged bar graph from the df_sorted ----
# reshape df
# https://r-charts.com/part-whole/stacked-bar-chart-ggplot2/
# x axis - effector line
# fill - group (disease intensity 0-4 %)
#
#-------------------------
#ggplot(df_sorted, aes(x = Effector_line, y = res_perc, fill = disease_score)) +
#  geom_bar(stat = "identity")
# --> output super odd, did something go wrong before?
# E) Plot simple, stagged bar graph for all effector lines
simple_df <- data.frame(df_sorted$Effector_line, df_sorted$disease_score, df_sorted$count)
# get a list of all the unique effector lines
e_lines <- unique(df$Effector_line)
# write function to sum up all the +/- infiltration spots (to account for repeating control samples)
sum_d <-  lapply(e_lines, function(x){ # sum up of cell-death POSITIVE
a <- df[(df$Effector_line == x),] # subset datset by effector line
b <- sum(a$nr_infiltration_spots) # sum infiltration spots WITH cell death
return(b)
}) %>% unlist()
simple_df_d <- as.data.frame(cbind(unlist(e_lines), as.numeric(sum_d))) # df cell death'
simple_df_d <- arrange(simple_df_d, V1)
labels <- simple_df_d$V2
# add the labels to the simple_df
merged_df <- merge(simple_df, simple_df_d)
merged_df <- arrange(merged_df, merged_df$df_sorted.Effector_line)
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#!!!   # label individual bars
geom_text(label = labels ,size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
# A) General basics ----
# 1. clean environment
rm(list=ls())
# Generate suffix for output names
SUF <- "1"
# generate prefix string including date/ Initials
current_date <- gsub("-", "", as.character(Sys.Date()))# Get the current date as character
pre <- paste("MM", current_date, sep = "")
# 2. open libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readxl)
library(plotly)
library(tidyr)
# 3. set working directory
setwd("C:/Users/Mende012/Documents/Bioinformatics/Cell_death/Analysis_disease_symptoms_visual_scoring")
# 4. load file
df <- read_xlsx("MM20230516_summary_visual_score_cell_death.xlsx")
# B) get data(frame) into desired shape ----
# 5. rename columns and select only relevant columns
df <- data.frame("date_infiltration" = df$`Date infiltartion`,
"Effector_line" = df$`Effector line`,
"nr_score_0" = df$disease_score_0,
"nr_score_1" = df$disease_score_1,
"nr_score_2" = df$disease_score_2,
"nr_score_3" = df$disease_score_3,
"nr_score_4" = df$disease_score_4,
"nr_infiltration_spots" = df$`n (infiltration spots)`,
"avg_score" = df$`average disease score`)
# drop first row that only contains numbers of disease scores
df <- df[!(rownames(df) == '1'),]
# C) calculate the percentages of disease score incidences and store in df ----
# 6. create input vectors
# vector of row numbers
rows <- as.vector(1:length(df$Effector_line))
# Vector of colnames containing scores
n_scores <- grep("nr_score_", colnames(df), value = TRUE)
## 7. Design a function that can calculate the percentage of infiltration spots
# that was scored with a specific disease severity. Run the function to obtain a
# list of values.
result_perc <- do.call(cbind, lapply(n_scores, function(score) {
t(sapply(rows, function(row_nr) {
nr_sum <- df$nr_infiltration_spots[row_nr]
nr_score <- df[[score]][row_nr]
perc <- (nr_score / nr_sum) * 100
return(perc)
}))
})) %>% t()
# 8.!! Convert the original df to a long format so that the % results can be added
# 8.1 Convert the dataframe from wide to long format
df_long <- tidyr::pivot_longer(df,
cols = starts_with("nr_score_"),
names_to = "disease_score",
values_to = "count")
#!!! Sort the dataframe by first "disease_score", "disease_score", "Effector_line" columns in ascending order
df_sorted <- arrange(df_long, disease_score, Effector_line)
# 8.2 add the % (output of 7.) to the df_sorted, make EXTRA sure they are in the
#     correct order
df_sorted$res_perc <- result_perc
# D) create a stagged bar graph from the df_sorted ----
# reshape df
# https://r-charts.com/part-whole/stacked-bar-chart-ggplot2/
# x axis - effector line
# fill - group (disease intensity 0-4 %)
#
#-------------------------
#ggplot(df_sorted, aes(x = Effector_line, y = res_perc, fill = disease_score)) +
#  geom_bar(stat = "identity")
# --> output super odd, did something go wrong before?
# E) Plot simple, stagged bar graph for all effector lines
simple_df <- data.frame(df_sorted$Effector_line, df_sorted$disease_score, df_sorted$count)
# get a list of all the unique effector lines
e_lines <- unique(df$Effector_line)
# write function to sum up all the +/- infiltration spots (to account for repeating control samples)
sum_d <-  lapply(e_lines, function(x){ # sum up of cell-death POSITIVE
a <- df[(df$Effector_line == x),] # subset datset by effector line
b <- sum(a$nr_infiltration_spots) # sum infiltration spots WITH cell death
return(b)
}) %>% unlist()
simple_df_d <- as.data.frame(cbind(unlist(e_lines), as.numeric(sum_d))) # df cell death'
simple_df_d <- arrange(simple_df_d, V1)
labels <- simple_df_d$V2
# add the labels to the simple_df
merged_df <- merge(simple_df, simple_df_d)
merged_df <- arrange(merged_df, merged_df$df_sorted.Effector_line)
# draw stagged bar graph
ggp <- ggplot(simple_df, aes(x = df_sorted.Effector_line, y = df_sorted.count,
fill = df_sorted.disease_score)) +
geom_bar(position = "fill", stat = "identity") +
# asign colours
scale_fill_manual(values = c("#fffbf1", "#ffeabc", "#ffbe2d", "#E69F00", "#D55E00")) +
# define axis limits if needed
coord_cartesian(ylim = c(0.1, 1.0))  +
# define the theme of the boxplot
theme_bw() +  # make the bg white
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), # remove background, frame
axis.line = element_line(colour = "black"))+
# label the axises
xlab("Effector") +
ylab("% disease score") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#!!!   # label individual bars
#geom_text(label = labels ,size = 3, hjust = 1)
ggp                                 # Draw ggplot2 plot scaled to 1.00
ggsave(paste(pre, sep = "","_cell_death.svg"),width = 7, height = 4)
ggp
dev.off()
ggplotly(ggp)
